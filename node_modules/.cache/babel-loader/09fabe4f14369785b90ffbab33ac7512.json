{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // const initialState = {\n// \tvalue: 0,\n// \tstatus: 'idle',\n// };\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n// \t'counter/fetchCount',\n// \tasync (amount) => {\n// \t\tconst response = await fetchCount(amount);\n// \t\t// The value we return becomes the `fulfilled` action payload\n// \t\treturn response.data;\n// \t}\n// );\n\nexport const mailSlice = createSlice({\n  name: 'mail',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = mailSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.mail.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default mailSlice.reducer;","map":{"version":3,"sources":["/Users/sevdaerkan/Dropbox/My Mac (Sevdas-MacBook-Pro.local)/Desktop/gmail-clone/src/features/mailSlice.js"],"names":["createAsyncThunk","createSlice","mailSlice","name","initialState","reducers","increment","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","incrementAsync","pending","status","fulfilled","actions","selectCount","mail","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACpCE,EAAAA,IAAI,EAAE,MAD8B;AAEpCC,EAAAA,YAFoC;AAGpC;AACAC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACrB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACA,KAPQ;AAQTC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACA,KAVQ;AAWT;AACAE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACrCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACA;AAdQ,GAJ0B;AAoBpC;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC3BA,IAAAA,OAAO,CACLC,OADF,CACUC,cAAc,CAACC,OADzB,EACmCV,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAACW,MAAN,GAAe,SAAf;AACA,KAHF,EAIEH,OAJF,CAIUC,cAAc,CAACG,SAJzB,EAIoC,CAACZ,KAAD,EAAQI,MAAR,KAAmB;AACrDJ,MAAAA,KAAK,CAACW,MAAN,GAAe,MAAf;AACAX,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACA,KAPF;AAQA;AA/BmC,CAAD,CAA7B;AAkCP,OAAO,MAAM;AAAEN,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CR,SAAS,CAACkB,OAA9D,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAId,KAAD,IAAWA,KAAK,CAACe,IAAN,CAAWd,KAA1C,C,CAEP;AACA;;AACA,OAAO,MAAMe,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjE,QAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC3BF,IAAAA,QAAQ,CAACf,iBAAiB,CAACc,MAAD,CAAlB,CAAR;AACA;AACD,CALM;AAOP,eAAetB,SAAS,CAAC0B,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// const initialState = {\n// \tvalue: 0,\n// \tstatus: 'idle',\n// };\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n// \t'counter/fetchCount',\n// \tasync (amount) => {\n// \t\tconst response = await fetchCount(amount);\n// \t\t// The value we return becomes the `fulfilled` action payload\n// \t\treturn response.data;\n// \t}\n// );\n\nexport const mailSlice = createSlice({\n\tname: 'mail',\n\tinitialState,\n\t// The `reducers` field lets us define reducers and generate associated actions\n\treducers: {\n\t\tincrement: (state) => {\n\t\t\t// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n\t\t\t// doesn't actually mutate the state because it uses the Immer library,\n\t\t\t// which detects changes to a \"draft state\" and produces a brand new\n\t\t\t// immutable state based off those changes\n\t\t\tstate.value += 1;\n\t\t},\n\t\tdecrement: (state) => {\n\t\t\tstate.value -= 1;\n\t\t},\n\t\t// Use the PayloadAction type to declare the contents of `action.payload`\n\t\tincrementByAmount: (state, action) => {\n\t\t\tstate.value += action.payload;\n\t\t},\n\t},\n\t// The `extraReducers` field lets the slice handle actions defined elsewhere,\n\t// including actions generated by createAsyncThunk or in other slices.\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(incrementAsync.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(incrementAsync.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t\tstate.value += action.payload;\n\t\t\t});\n\t},\n});\n\nexport const { increment, decrement, incrementByAmount } = mailSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.mail.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n\tconst currentValue = selectCount(getState());\n\tif (currentValue % 2 === 1) {\n\t\tdispatch(incrementByAmount(amount));\n\t}\n};\n\nexport default mailSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}